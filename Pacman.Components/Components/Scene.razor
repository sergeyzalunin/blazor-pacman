@implements IDisposable;
@inject IScene SceneValue;
@inject Microsoft.JSInterop.IJSRuntime JsRuntime;

<div class="scene">

    @foreach(var food in SceneValue.Foods)
    {
        <Food FoodValue="@food" />
    }

    <Header SceneHeader="@SceneValue.SceneHeader" />
    <PacmanUnit Pacman="@SceneValue.Pacman" />

    <GhostUnit Ghost="@SceneValue.Ghosts[0]" />
    <GhostUnit Ghost="@SceneValue.Ghosts[1]" />
    <GhostUnit Ghost="@SceneValue.Ghosts[2]" />
    <GhostUnit Ghost="@SceneValue.Ghosts[3]" />
</div>


@code {
   
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await SceneValue.OnAfterRenderAsync(firstRender);

        //This can be called more then once
        if (!firstRender)
            return;

        var _interopWindow = new Pacman.Core.JsInterop.InteropWindow(JsRuntime);
        await _interopWindow.Initialize();
    }
    
    public void Dispose()
    {
        SceneValue.Dispose();
    }
}
