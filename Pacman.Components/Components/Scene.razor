@implements IDisposable;
@inject IScene SceneValue;
@inject Microsoft.JSInterop.IJSRuntime JsRuntime;

<div class="scene">

    @if (SceneValue.Foods != null)
    {
        @foreach(var food in SceneValue.Foods)
        {
            <Food FoodValue="@food" />
        }
    }
    <Header SceneHeader="@SceneValue.SceneHeader" />
    <PacmanUnit Pacman="@SceneValue.Pacman" />

    <GhostUnit Ghost="@SceneValue.Ghosts[0]" ColorName="red" />
    <GhostUnit Ghost="@SceneValue.Ghosts[1]" ColorName="green" />
    <GhostUnit Ghost="@SceneValue.Ghosts[2]" ColorName="blue" />
    <GhostUnit Ghost="@SceneValue.Ghosts[3]" ColorName="orange" />
</div>


@code {
   
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        //This can be called more then once
        if (!firstRender) return;

        await SceneValue.OnAfterRenderAsync();
        SceneValue.OnStateHasChanged += (o, e) => InvokeAsync(StateHasChanged);

        var _interopWindow = new Pacman.Core.JsInterop.InteropWindow(JsRuntime);
        await _interopWindow.Initialize();

        SceneValue.Foods = new Pacman.Core.Implementation.FoodFactory().GetFood(SceneValue.Window);
        StateHasChanged();
    }
    
    public void Dispose()
    {
        SceneValue.Dispose();
    }
}
