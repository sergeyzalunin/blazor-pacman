<Header @ref="@header" />
<PacmanUnit @ref="@pacman"/>

@for(int i = 0; i < 4; i++)
{
    GhostUnit ghost = null;

    <GhostUnit @ref="@ghost" />

    ghosts.Add(ghost);
}

@code {
    private bool crashed;

    private Header header;
    private PacmanUnit pacman;
    private List<GhostUnit> ghosts = new List<GhostUnit>(4);
    
    private Timer crashTimer, changeDirectionTimer;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Run(() => 
        { 
            crashTimer = new Timer(LookForCrash, 100);
           // changeDirectionTimer = new Timer(ChangeDirection, 500);
        });
    }

    void KillGhosts()
    {
        for(int i = 1; i <= 4; i++)
        {
            var currentGhost = ghosts[i];
            currentGhost.Kill();
        }
    }

    void LookForCrash()
    {
        var pacmanX = pacman.Coordinates.Left;
        var pacmanY = pacman.Coordinates.Top;
        var pacmanLastX = pacman.Coordinates.Left + pacman.Size;
        var pacmanLastY = pacman.Coordinates.Top + pacman.Size;

        for(var i = 0; i < 4; i++)
        {
            var currentGhost = ghosts[i];
            var currentGhostX = currentGhost.Coordinates.Left;
            var currentGhostY = currentGhost.Coordinates.Top;
            var currentGhostLastX = currentGhost.Coordinates.Left + currentGhost.Size;
            var currentGhostLastY = currentGhost.Coordinates.Top + currentGhost.Size;

            if ((pacmanX >= currentGhostX && pacmanX <= currentGhostLastX) || (pacmanLastX >= currentGhostX && pacmanLastX <= currentGhostLastX))
            {
                if((pacmanY >= currentGhostY && pacmanY <= currentGhostLastY) || (pacmanLastY >= currentGhostY && pacmanLastY <= currentGhostLastY))
                {
                    this.crashed = true;
                }
            }

            if (this.crashed)
            {
                this.header.GameOver();
                crashTimer.StopTimer();
                this.KillGhosts();
                break;
            }
        }
    }
}
